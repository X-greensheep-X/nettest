#! /bin/bash
# Brandon Vincent 8/7/23
# runs a variety of tests to assist in diagnosis of network issues
# syntax: nettest [-e] [--nocolor]
#	-e	exit on failure of any test
#	--nocolor	don't use ANSI escape codes in output, suitable for use with watch


# GPLv2 statement
# This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

echo -e "nettest v1.0.1\n"


doExit=false
if [ "$1" == "-e" ] || [ "$2" == "-e" ]
then
	doExit=true
fi

doColor=true
if [ "$1" == "--nocolor" ] || [ "$2" == "--nocolor" ]
then
	doColor=false
fi


echo -n "any NIC is up ............ "
if [ -n "$(ip addr | grep 'state UP')" ] # checks to see if any NIC is currently in RUNNING state
then
  if $doColor
  then
    echo -e "\e[32m\e[7mYES\e[27m\e[39m"
  else
      echo "YES"
  fi
else
  if $doColor
  then
      echo -e "\e[7m\e[31mNO\e[39m\e[27m"
  else
      echo "NO"
  fi
  if $doExit; then exit; fi
fi

echo -n "NIC has IP ............... "
if [ -n "$(ip addr | grep 'inet' | grep brd)" ] # checks to see if any NIC has an IP address assigned
then
  if $doColor
  then
    echo -e "\e[32m\e[7mYES\e[27m\e[39m"
  else
    echo "YES"
  fi
else
  if $doColor
  then
    echo -e "\e[7m\e[31mNO\e[39m\e[27m"
  else
    echo "NO"
  fi
  if $doExit; then exit; fi
fi

gateway=$(ip route | grep default | cut -d " " -f 3) # checks for a default gateway in the routing table
echo -n "routing table check ...... "
if [ -n "$gateway" ]
then
  if $doColor
  then
    echo -e "\e[32m\e[7mPASS\e[27m\e[39m"
  else
    echo "PASS"
  fi
else
  if $doColor
  then
    echo -e "\e[7m\e[31mFAIL\e[39m\e[27m"
  else
    echo "FAIL"
  fi
  if $doExit; then exit; fi
fi

echo -n "gateway ping ............. "
if [ -n "$(ping -4 $gateway -c 1 2>/dev/null | grep '1 received')" ] #pings gateway
then
  if $doColor
  then
    echo -e "\e[32m\e[7mPASS\e[27m\e[39m"
  else
    echo "PASS"
  fi
else
  if $doColor
  then
    echo -e "\e[7m\e[31mFAIL\e[39m\e[27m"
  else
    echo "FAIL"
  fi
  if $doExit; then exit; fi
fi

echo -n "google ping .............. "
if [ -n "$(ping 8.8.8.8 -c 1 2>/dev/null | grep '1 received')" ] # pings google's DNS
then
  if $doColor
  then
    echo -e "\e[32m\e[7mPASS\e[27m\e[39m"
  else
    echo "PASS"
  fi
else
  if $doColor
  then
    echo -e "\e[7m\e[31mFAIL\e[39m\e[27m"
  else
    echo "FAIL"
  fi
  if $doExit; then exit; fi
fi

echo -n "usable DNS ............... "
if [ -z "$(nslookup google.com | grep "** server")" ] # check if current DNS can resolve google.com NOTE: this assumes that you are using an outside DNS
then
  if $doColor
  then
    echo -e "\e[32m\e[7mYES\e[27m\e[39m"
  else
    echo "YES"
  fi
else
  if $doColor
  then
    echo -e "\e[7m\e[31mNO\e[39m\e[27m"
  else
    echo "NO"
  fi
  echo -n "reachable DNS ............ "
  if [ -n "$(ping $(cat /etc/resolv.conf | grep nameserver | cut -d " " -f 2) -c 1 2>/dev/null | grep '1 received')" ]
  then
    if $doColor
    then
      echo -e "\e[32m\e[7mYES\e[27m\e[39m"
    else
      echo "YES"
    fi
  else
    if $doColor
    then
      echo -e "\e[7m\e[31mNO\e[39m\e[27m"
    else
      echo "NO"
    fi
  fi
  if $doExit; then exit; fi
fi

echo -n "webpage get .............. "
if [ "$(wget -qO- https://pastebin.com/raw/MURsYtKx | grep -c nettest)" -eq 1 ] # grabs a string from pastebin to check if caught by a captive portal or web filter
then
  if $doColor
  then
    echo -e "\e[32m\e[7mPASS\e[27m\e[39m"
  else
    echo "PASS"
  fi
else
  if $doColor
  then
    echo -e "\e[7m\e[31mFAIL\e[39m\e[27m"
  else
    echo "FAIL"
  fi
  if $doExit; then exit; fi
fi

echo ""
echo "measuring packet loss ..."
echo ""

send=100
returned=0

echo -n "["
for i in $(seq 1 $send)
do
        if [ -n "$(ping -W .5 -c 1 1.1.1.1 | grep "1 received")" ]
        then
                let returned++
                echo -n "-"
        else
                echo -n "!"
        fi
done
echo "]"

echo "$(echo "$(echo "$send - $returned" | bc) / $send * 100 " | bc -l | cut -c 1-5)% packet loss"
